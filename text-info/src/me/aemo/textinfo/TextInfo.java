package me.aemo.textinfo;

import android.content.Context;
import android.util.TypedValue;
import android.view.View;
import android.view.ViewGroup;
import com.google.appinventor.components.annotations.SimpleFunction;
import com.google.appinventor.components.runtime.AndroidNonvisibleComponent;
import com.google.appinventor.components.runtime.AndroidViewComponent;
import com.google.appinventor.components.runtime.Component;
import com.google.appinventor.components.runtime.ComponentContainer;
import com.google.appinventor.components.runtime.errors.YailRuntimeError;
import com.google.appinventor.components.runtime.util.YailList;
import org.altmail.dicttextviewlistener.DictScrollView;
import org.altmail.dicttextviewlistener.DictTextView;

public class TextInfo extends AndroidNonvisibleComponent implements Component {

  private Context context;
  private DictScrollView scrollView;
  private DictTextView textView;

  public TextInfo(ComponentContainer container) {
    super(container.$form());
    this.context = container.$context();
  }

  @SimpleFunction
  public void Initialize(AndroidViewComponent view, boolean scroll){
    if (scroll){
      scrollView = new DictScrollView(context);
      int padding = (int) dpToPixels(context, 16);
      scrollView.setPadding(padding, padding, padding, padding);
      scrollView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
      scrollView.setClipToPadding(false);
      scrollView.setLayoutParams(new ViewGroup.LayoutParams(-1,-1));
    }

    textView = new DictTextView(context);
    textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
    textView.setLayoutParams(new ViewGroup.LayoutParams(-1,-2));
    //textView.setText("The heat released by burning a typical jet fuel in air is approximately 43,370 kilojoules per kilogram (18,650 British thermal units per pound) of fuel. If this process were 100 percent efficient, it would then produce a gas power for every unit of fuel flow of 7.45 horsepower/(pounds per hour), or 12 kilowatts/(kg per hour). In actual fact, certain practical thermodynamic limitations, which are a function of the peak gas temperature achieved in the cycle, restrict the efficiency of the process to about 40 percent of this ideal value. The peak pressure achieved in the cycle also affects the efficiency of energy generation. This implies that the lower limit of specific fuel consumption (SFC) for an engine producing gas horsepower is 0.336 (pound per hour)/horsepower, or 0.207 (kg per hour)/kilowatt. In actual practice, the SFC is even higher than this lower limit because of inefficiencies, losses, and leakages in the individual components of the prime mover.\\nBecause weight and volume are at a premium in the overall design of an aircraft and because the power plant represents a large fraction of any aircraft’s total weight and volume, these parameters must be minimized in the engine design. The airflow that passes through an engine is a representative measure of the engine’s cross-sectional area and hence its weight and volume. Therefore, an important figure of merit for the prime mover is its specific power—the amount of power that it generates per unit of airflow. This quantity is a very strong function of the peak gas temperature in the core at the discharge of the combustion chamber. Modern engines generate from 150 to 250 horsepower/(pound per second), or 247 to 411 kilowatts/(kg per second).\\n\\nThe propulsor\\n\\nThe gas horsepower generated by the prime mover in the form of hot, high-pressure gas is used to drive the propulsor, enabling it to generate thrust for propelling or lifting the aircraft. The principle on which such a thrust is produced is based on Newton’s second law of motion. This law generalizes the observation that the force (F) required to accelerate a discrete mass (m) is proportional to the product of that mass and the acceleration (a). In effect,\\nwhere the mass is taken as the weight (w) of the object divided by the acceleration due to gravity (g) at the place where the object was weighed. In the case of a jet engine, one is generally dealing with the acceleration of a steady stream of air rather than with a discrete mass. Here, the equivalent statement of the second law of motion is that the force (F) required to increase the velocity of a stream of fluid is proportional to the product of the rate of mass flow (M) of the stream and the change in velocity of the stream,\\nwhere the inlet velocity (V0) relative to the engine is taken to be the flight velocity and the discharge velocity (Vj) is the exhaust or jet velocity relative to the engine. W is the rate of weight flow of working fluid (i.e., air or products of combustion) divided by the acceleration of gravity in the place where the weight flow is measured. The relatively small effect of the weight flow of fuel in creating a difference between the weight flow of the inlet and exhaust streams is intentionally disregarded.\\nOne thereby infers that the components of a propulsor must exert a force F on the stream of air flowing through the propulsor if this device accelerates the airstream from the flight velocity V0 to the discharge velocity Vj. The reaction to that force F is ultimately transmitted by the mounts of the propulsor to the aircraft as propulsive thrust.\\nThere are two general approaches to converting gas horsepower to propulsive thrust. In one, a second turbine (i.e., a low-pressure, or power, turbine) may be introduced into the engine flow path to extract additional mechanical power from the available gas horsepower. This mechanical power may then be used to drive an external propulsor, such as an airplane propeller or helicopter rotor. In this case, the thrust is developed in the propulsor as it energizes and accelerates the airflow through the propulsor—i.e., an airstream separate from that flowing through the prime mover.\\nIn the second approach, the high-energy stream delivered by the prime mover may be fed directly to a jet nozzle, which accelerates the gas stream to a very high velocity as it leaves the engine, as is typified by the turbojet. In this case, the thrust is developed in the components of the prime mover as they energize the gas stream.\\nIn other types of engines, such as the turbofan, thrust is generated by both approaches: A major part of the thrust is derived from the fan, which is powered by a low-pressure turbine and which energizes and accelerates the bypass stream (see below). The remaining part of the total thrust is derived from the core stream, which is exhausted through a jet nozzle.\\nJust as the prime mover is an imperfect device for converting the heat of fuel combustion to gas horsepower, so the propulsor is an imperfect device for converting the gas horsepower to propulsive thrust. There is generally a great deal of energy left in the high-temperature, high-velocity jet stream exiting from the propulsor that is not fully exploited for propulsion. The efficiency of a propulsor, propulsive efficiency ηp, is the portion of the available energy that is usefully applied in propelling the aircraft compared to the total energy of the jet stream. For the simple but representative case of the discharge airflow equal to the inlet gas flow, it is found that\\nAlthough the jet velocity Vj must be larger than the aircraft velocity V0 to generate useful thrust, a large jet velocity that exceeds flight speed by a substantial margin can be very detrimental to propulsive efficiency. Maximum propulsive efficiency is approached when the jet velocity is almost equal to (but, of necessity, slightly higher than) the flight speed. This fundamental fact has given rise to a large variety of jet engines, each designed to generate a specific range of jet velocities that matches the range of flight speeds of the aircraft that it is supposed to power.\\nThe net assessment of the efficiency of a jet engine is the measurement of its rate of fuel consumption per unit of thrust generated (e.g., in terms of pounds, or kilograms, per hour of fuel consumed per pounds, or kilograms, of thrust generated). There is no simple generalization of the value of specific fuel consumption of a thrust engine. It is not only a strong function of the prime mover’s efficiency (and hence its pressure ratio and peak-cycle temperature) but also of the propulsive efficiency of the propulsor (and hence of the engine type). It also is a strong function of the aircraft flight speed and the ambient temperature (which is in turn a strong function of altitude, season, and latitude).");

    if (scroll){
      ViewGroup vg = (ViewGroup) view.getView();
      vg.addView(scrollView);
      scrollView.addView(textView);
    } else {
      ViewGroup vg = (ViewGroup) view.getView();
      vg.addView(textView);
    }

  }
  @SimpleFunction
  public void SetText(String text){
    textView.setText(text);
  }
  @SimpleFunction
  public void SetTextSize(int sizeSp){
    textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, sizeSp);
  }
  @SimpleFunction
  public void SetPopupAccentColor(int color){
    textView.setPopupAccentColor(color);
  }
  @SimpleFunction
  public void SetPopupBodyTextColor(int color){
    textView.setPopupBodyTextColor(color);
  }
  @SimpleFunction
  public void SetPopupBackgroundColor(int color){
    textView.setPopupBackgroundColor(color);
  }
  @SimpleFunction
  public void SetPopupPrimaryColor(int color){
    textView.setPopupPrimaryColor(color);
  }
  @SimpleFunction
  public void SetPopupTitleTextColor(int color){
    textView.setPopupTitleTextColor(color);
  }
  @SimpleFunction
  public void SetPopupCornerRadius(float radius){
    textView.setPopupCornerRadius(radius);
  }
  @SimpleFunction
  public void SetPopupStrokeWidth(float stokeWidth){
    textView.setPopupStrokeWidth(stokeWidth);
  }

  @SimpleFunction
  public void setLongPressCountdown(int countdown){
    textView.setLongPressCountdown(countdown);
  }

  @SimpleFunction
  public void setLookupCountdown(int countdown){
    textView.setLookupCountdown(countdown);
  }

  @SimpleFunction
  public boolean IsDismissPopup(){
    return textView.dismissPopup();
  }


  public static float dpToPixels(Context context, float dp) {
    float density = context.getResources().getDisplayMetrics().density;
    return dp * density;
  }


}
